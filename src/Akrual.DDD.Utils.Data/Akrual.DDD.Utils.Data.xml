<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Akrual.DDD.Utils.Data</name>
    </assembly>
    <members>
        <member name="M:Akrual.DDD.Utils.Data.DbContexts.AkrualContext.GetByIdAsync``1(System.Guid,System.Boolean,System.Boolean)">
            <summary>
                use with sampleEntry when you do not know exactly which Class you are looking for in the DB.
                (e.g.: if you do not know how to write the function with it's required class GetById
                &lt;Operacao&gt;, then use with the sample;)
            </summary>
            <typeparam name="TEntry"></typeparam>
            <param name="id"></param>
            <param name="mustReturnFromDB"></param>
            <param name="forceCaching"></param>
            <returns></returns>
        </member>
        <member name="M:Akrual.DDD.Utils.Data.Repositories.SqlRepository`1.CreateAsOf(System.Guid,System.Nullable{System.DateTime},System.Boolean)">
            <summary>
                Creates The aggregate, then query the event store for all it's events until a certain point. 
                And applies them in order. Then it check all later events that should be applied before the given
                point and applies them too.
                <remarks> 
                    In other words, it will give the result of a particular time point within the stream (everything we know 
                    that happened until that point in time, counting with events that may have happened later, but affects some point back in time) 
                </remarks>
            </summary>
            <returns>Returns the Filled Aggregate with all the invariants Checked.</returns>
        </member>
        <member name="M:Akrual.DDD.Utils.Data.Repositories.SqlRepository`1.CreateAsAt(System.Guid,System.Nullable{System.DateTime},System.Boolean)">
            <summary>
                Creates The aggregate, then query the event store for all it's events until a certain point. 
                And applies them in order.
                <remarks> 
                    In other words, it will give the result at a particular time point within the stream (what did we know as at this point in time) 
                </remarks>
            </summary>
            <returns>Returns the Filled Aggregate with all the invariants Checked.</returns>
        </member>
    </members>
</doc>
